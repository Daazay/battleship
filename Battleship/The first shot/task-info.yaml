type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should report an error " +
                        "if there is an input mistake. " +
                        "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("A1");
            checkShot(getFieldMatrix(output), "A1", output);

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should report an error " +
                        "if there is an input mistake. " +
                        "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output) || !output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("E4");
            checkMissing(getFieldMatrix(output), "E4", output);

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                    "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/Logic/Game.java
  visible: true
  text: |
    package battleship.Logic;

    import battleship.Logic.Exceptions.InvalidShipCoordinatesException;
    import battleship.Logic.Exceptions.InvalidSubmarineLengthException;
    import battleship.Logic.Exceptions.ShipPlacedTooCloseException;
    import battleship.Utils.Pair;

    import java.util.List;
    import java.util.Scanner;

    public class Game {
        Scanner scanner;
        private final Field field;
        private final Player player1;
        private final Player player2;

        public Game() {
            field = new Field();
            player1 = new Player();
            player2 = new Player();
            scanner = new Scanner(System.in);
        }

        private int[] getCoordinate(String coordinate) {
            return new int[]{coordinate.charAt(0) - 65, Integer.parseInt(coordinate.substring(1)) - 1};
        }



        private void placeShips() {
            while(true) {
                List<Ship> ships = player1.getShips();
                int size = ships.size();
                Ship ship = null;
                switch (size) {
                    case 0: {
                        ship = new Ship("Aircraft Carrier", 5);
                        break;
                    }
                    case 1: {
                        ship = new Ship("Battleship", 4);
                        break;
                    }
                    case 2: {
                        ship = new Ship("Submarine", 3);
                        break;
                    }
                    case 3: {
                        ship = new Ship("Cruiser", 3);
                        break;
                    }
                    case 4: {
                        ship = new Ship("Destroyer", 2);
                        break;
                    }
                    default:
                        return;
                }
                try{
                    System.out.println("Enter the coordinates of the " + ship.getName() + "(" + ship.getLength() +" cells):");
                    field.placeShip(new Pair<>(getCoordinate(scanner.next()),getCoordinate(scanner.next())), ship);
                    player1.placeShip(ship);
                    field.show();
                } catch (Exception e) {
                    System.out.println("Error!" + e.getMessage() + "Try again:");
                }
            }
        }

        public void Run() {
            field.show();
            placeShips();
        }

    }
  learner_created: true
- name: src/battleship/Logic/Field.java
  visible: true
  text: |
    package battleship.Logic;

    /*
        Aircraft Carrier is 5 cells,
        Battleship is 4 cells,
        Submarine is 3 cells,
        Cruiser is also 3 cells,
        and Destroyer is 2 cells.
    */

    import battleship.Logic.Exceptions.InvalidShipCoordinatesException;
    import battleship.Logic.Exceptions.InvalidSubmarineLengthException;
    import battleship.Logic.Exceptions.ShipPlacedTooCloseException;
    import battleship.Utils.Pair;

    public class Field {
        private final String[][] grid;

        public Field() {
            grid = new String[10][10];
            for (int i = 0; i < 10; i++) {
                grid[i] = new String[11];
            }

            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    grid[i][j] = "~";
                }
            }
        }

        public void placeShip(Pair<int[],int[]> coordinates, Ship ship) throws InvalidShipCoordinatesException, InvalidSubmarineLengthException, ShipPlacedTooCloseException {
            int minRow = Math.min(coordinates.getFirst()[0], coordinates.getSecond()[0]);
            int maxRow = Math.max(coordinates.getFirst()[0], coordinates.getSecond()[0]);
            int minCol = Math.min(coordinates.getFirst()[1], coordinates.getSecond()[1]);
            int maxCol = Math.max(coordinates.getFirst()[1], coordinates.getSecond()[1]);

            // check if coordinates diagonal
            if(isCoordinatesDiagonal(minRow, maxRow, minCol, maxCol))
                throw new InvalidShipCoordinatesException("Wrong ship location!");
            // check if the length of the ship is longer than it should be
            if(isShipsLengthValid(minRow, maxRow, minCol, maxCol, ship))
                throw new InvalidSubmarineLengthException("Wrong length of the Submarine!");
            // check if the ship is close to another
            if(isShipCloseToAnotherOne(minRow, maxRow, minCol, maxCol))
                throw new ShipPlacedTooCloseException("You placed it too close to another one.");
            // place ship
            setCells(minRow, maxRow, minCol, maxCol, "O");
        }
        private boolean isShipCloseToAnotherOne(int fRow, int sRow, int fCol, int sCol) {
            for (int i = fRow - 1; i <= sRow + 1; i++) {
                for (int j = fCol - 1; j <= sCol + 1; j++) {
                    if (i < 0 || j < 0 || i >= 10 || j >= 10) continue;
                    if (grid[i][j].equals("O")) return true;
                }
            }
            return false;
        }

        private boolean isShipsLengthValid(int fRow, int sRow, int fCol, int sCol, Ship ship) {
            if (fRow == sRow) {
                return !(sCol - fCol + 1 == ship.getLength());
            } else if (fCol == sCol) {
                return !(sRow - fRow + 1 == ship.getLength());
            }
            return false;
        }

        private boolean isCoordinatesDiagonal(int fRow, int sRow, int fCol, int sCol) {
            return !(fRow == sRow || fCol == sCol);
        }

        public void show() {
            System.out.print("  ");
            for (int i = 1; i <= 10; i++) {
                System.out.print(i);
                System.out.print(" ");
            }
            System.out.println();
            for (int i = 0; i < 10; i++) {
                System.out.print((char)('A' + i));
                for (int j = 0; j < 10; j++) {
                    System.out.print(" ");
                    System.out.print(grid[i][j]);
                }
                System.out.println();
            }
        }

        public void setCells(int fRow, int sRow, int fCol, int sCol, String cell) {
            for (int i = fRow; i <= sRow; i++) {
                for (int j = fCol; j <= sCol; j++) {
                    grid[i][j] = cell;
                }
            }
        }
    }
  learner_created: true
- name: src/battleship/Logic/Ship.java
  visible: true
  text: |
    package battleship.Logic;

    import battleship.Utils.Pair;

    public class Ship {
        private final String name;
        private final int length;

        private int health = 0;

        public Ship(String name, int length) {
            this.name = name;
            this.length = length;
            this.health = length;
        }

        public String getName() {
            return name;
        }

        public int getLength() {
            return length;
        }

        public void hit() {
            health--;
        }

        public boolean isDestroyed() {
            return health == 0;
        }
    }
  learner_created: true
- name: src/battleship/Logic/Exceptions/WrongShipLocationException.java
  visible: true
  text: |
    package battleship.Logic.Exceptions;

    public class WrongShipLocationException extends Exception {
        public WrongShipLocationException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/battleship/Utils/Pair.java
  visible: true
  text: |
    package battleship.Utils;

    public class Pair<F,S> {
        private F first;
        private S second;

        public Pair(F first, S second) {
            this.first = first;
            this.second = second;
        }

        public F getFirst() {
            return first;
        }

        public void setFirst(F first) {
            this.first = first;
        }

        public S getSecond() {
            return second;
        }

        public void setSecond(S second) {
            this.second = second;
        }
    }
  learner_created: true
- name: src/battleship/Logic/Exceptions/ShipPlacedTooCloseException.java
  visible: true
  text: |
    package battleship.Logic.Exceptions;

    public class ShipPlacedTooCloseException extends Exception {
        public ShipPlacedTooCloseException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/battleship/Logic/Player.java
  visible: true
  text: |
    package battleship.Logic;

    import battleship.Utils.Pair;

    import java.util.ArrayList;
    import java.util.List;

    public class Player {
        List<Ship> ships;

        Player() {
            ships = new ArrayList<>();
        }

        public void placeShip(Ship ship) {
            ships.add(ship);
        }

        public List<Ship> getShips() {
            return ships;
        }
    }
  learner_created: true
- name: src/battleship/Logic/Exceptions/InvalidSubmarineLengthException.java
  visible: true
  text: |
    package battleship.Logic.Exceptions;

    public class InvalidSubmarineLengthException extends Exception {
        public InvalidSubmarineLengthException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/battleship/Logic/Exceptions/InvalidCoordinatesException.java
  visible: true
  text: |
    package battleship.Logic.Exceptions;

    public class InvalidShipCoordinatesException extends Exception {
        public InvalidShipCoordinatesException(String message) {
            super(message);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/664/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 26 Aug 2022 01:19:51 UTC
record: 2
