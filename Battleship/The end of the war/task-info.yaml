type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "x"}, {"E4", "m"},
                {"B9", "x"}, {"C9", "x"}, {"D9", "x"}, {"E9", "m"}, {"F3", "x"}, {"F4", "x"},
                {"F5", "x"}, {"F6", "x"}, {"F7", "x"}, {"F10", "m"}, {"G8", "m"}, {"G5", "m"},
                {"H2", "m"}, {"I2", "x"}, {"J2", "x"}, {"J6", "m"}, {"J8", "x"}, {"J9", "x"}, {"J10", "x"}
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("Your program didn't print a massage about game start");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "m"}, {"F5", "m"},
                {"B5", "x"}, {"B4", "m"}, {"C5", "x"}, {"H8", "m"}, {"F8", "x"}, {"G8", "m"},
                {"E8", "x"}, {"D8", "x"}, {"C8", "x"}, {"D8", "x"}, {"I9", "m"}, {"H1", "x"},
                {"I1", "m"}, {"H2", "x"}, {"H3", "x"}, {"E2", "m"}, {"I8", "m"}, {"J7", "x"},
                {"J8", "m"}, {"J6", "x"}, {"J5", "x"}, {"J4", "x"}, {"J3", "x"},
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        String validateShots(TestedProgram main, String[][] commands) {

            String output = null;

            for (String[] item : commands) {
                output = main.execute(item[0]);
                if (item[1].equals("x")) {
                    if (!checkShot(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected hit in " + item[0]);
                    }
                }
                if (item[1].equals("m")) {
                    if (!checkMissing(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected miss in " + item[0]);
                    }
                }
            }

            return output;
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x");
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/Logic/Game.java
  visible: true
  text: |
    package battleship.Logic;

    import battleship.Utils.Pair;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Scanner;

    public class Game {
        Scanner scanner;
        private final Field field;
        private final Player player1;
        private final Player player2;

        private boolean isGameover = false;

        public Game() {
            field = new Field();
            player1 = new Player();
            player2 = new Player();
            scanner = new Scanner(System.in);
        }

        private int[] getCoordinate(String coordinate) {
            return new int[]{coordinate.charAt(0) - 65, Integer.parseInt(coordinate.substring(1)) - 1};
        }

        private void placeShip(Ship ship) {
            System.out.println("Enter the coordinates of the " + ship.getName() + "(" + ship.getLength() +" cells):");
            boolean isShipPlaced = false;
            while(!isShipPlaced) {
                try {
                    field.placeShip(new Pair<>(getCoordinate(scanner.next()), getCoordinate(scanner.next())), ship);
                    player1.placeShip(ship);
                    isShipPlaced = true;
                } catch (Exception e) {
                    System.out.println("Error! " + e.getMessage() + "Try again:");
                }
            }
        }

        private boolean fire() {
            System.out.println("Take a shot!");
            while(true) {
                try {
                    return field.fire(getCoordinate(scanner.next()));
                } catch (Exception e) {
                    System.out.println("Error! " + e.getMessage() + "Try again:");
                }
            }
        }
    /*    private void fire() {
            boolean move = false;
            while (true) {
                try {
                    if(move) {
                        String coordinates = scanner.next();
                        boolean isHitted = field.fire(getCoordinate(coordinates));
                        field.show();
                        if(isHitted) {
                            System.out.println("You hit a ship!");
                        } else {
                            System.out.println("You missed!");
                        }
                        move = false;
                    } else {
                        System.out.println("Take a shot!");
                        move = true;
                    }
                } catch (Exception e) {
                    System.out.println("Error! " + e.getMessage() + "Try again:");
                }
            }
        }*/

        public void Run() {
            List<Ship> firstPlayerShips = Arrays.asList(new Ship("Aircraft Carrier", 5),
                                                        new Ship("Battleship", 4),
                                                        new Ship("Submarine", 3),
                                                        new Ship("Cruiser", 3),
                                                        new Ship("Destroyer", 2));
            field.show();
            for(int i = 0; i < firstPlayerShips.size(); i++) {
                placeShip(firstPlayerShips.get(i));
                field.show();
            }
            System.out.println("The game starts!");
            field.showWithFog();
            boolean isHitted = fire();
            field.showWithFog();
            if(isHitted) {
                System.out.println("You hit a ship!");
            } else {
                System.out.println("You missed!");
            }
            field.show();
        }
    }
  learner_created: true
- name: src/battleship/Logic/Entities/Field.java
  visible: true
  text: |
    package battleship.Logic.Entities;

    import battleship.Logic.Exceptions.InvalidCoordinatesException;
    import battleship.Logic.Exceptions.InvalidSubmarineLengthException;
    import battleship.Logic.Exceptions.ShipPlacedTooCloseException;
    import battleship.Utils.Pair;

    public class Field {
        private final String[][] grid;
        private int health;
        public Field() {
            this.grid = createField();
            this.health = 0;
        }

        private String[][] createField() {
            String[][] grid = new String[10][10];
            for (int i = 0; i < 10; i++) {
                grid[i] = new String[10];
            }

            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    grid[i][j] = "~";
                }
            }
            return grid;
        }

        public int countOfUnsinkableShips() {
            return health;
        }
        public boolean placeShip(Pair<Integer,Integer> f,Pair<Integer,Integer> s, Ship ship) throws ShipPlacedTooCloseException, InvalidCoordinatesException, InvalidSubmarineLengthException {
            // Check if coordinates are valid
            if (isCoordOutOfField(f) || isCoordOutOfField(s) || !isShipsLocationIsValid(f,s))
                throw new InvalidCoordinatesException("Wrong ship location!");
            // Check if ships length is valid
            if (!isShipsLengthIsValid(f,s,ship))
                throw new InvalidSubmarineLengthException("Wrong length of the Submarine!");
            // Check if ship is close to another one
            if (isShipCloseToAnotherOne(f,s))
                throw new ShipPlacedTooCloseException("You placed it too close to another one!");
            // Otherwise
            setCells(f,s,"O");
            health++;
            return true;
        }

        public boolean fire(Pair<Integer,Integer> coord) throws InvalidCoordinatesException {
            // check if coordinates are valid
            if (isCoordOutOfField(coord))
                throw new InvalidCoordinatesException("You entered the wrong coordinates!");

            if (grid[coord.getFirst()][coord.getSecond()].equals("O")) {
                grid[coord.getFirst()][coord.getSecond()] = "X";
                return true;
            } else {
                grid[coord.getFirst()][coord.getSecond()] = "M";
                return false;
            }
        }

        public boolean isShipDestroyed(Pair<Integer,Integer> coord) throws InvalidCoordinatesException {
            // check if coordinates are valid
            if (isCoordOutOfField(coord))
                throw new InvalidCoordinatesException("You entered the wrong coordinates!");

            int y = coord.getFirst();
            int x = coord.getSecond();

            // determine if the ship is horizontal or vertical
            boolean isVertical = false;
            if (y - 1 >= 0) {
                isVertical = grid[y - 1][x].equals("X") || grid[y - 1][x].equals("O");
            }
            if (y + 1 < 10) {
                isVertical = grid[y + 1][x].equals("X") || grid[y + 1][x].equals("O");
            }

            if(isVertical) {
                for(int i = y; i != 0; i--) {
                    if(grid[i][x].equals("O"))
                        return false;
                    if(grid[i][x].equals("~"))
                        break;
                }
                for(int i = y; i < 10; i++) {
                    if(grid[i][x].equals("O"))
                        return false;
                    if(grid[i][x].equals("~"))
                        break;
                }
            } else {
                for(int i = x; i != 0; i--) {
                    if(grid[y][i].equals("O"))
                        return false;
                    if(grid[y][i].equals("~"))
                        break;
                }
                for(int i = y; i < 10; i++) {
                    if(grid[y][i].equals("O"))
                        return false;
                    if(grid[y][i].equals("~"))
                        break;
                }
            }
            health--;
            return true;
        }
        public void show(boolean withFog) {
            System.out.print("  ");
            for (int i = 1; i <= 10; i++) {
                System.out.print(i);
                System.out.print(" ");
            }
            System.out.println();
            for (int i = 0; i < 10; i++) {
                System.out.print((char)('A' + i));
                for (int j = 0; j < 10; j++) {
                    System.out.print(" ");
                    if (withFog && grid[i][j].equals("O")) {
                        System.out.print("~");
                    } else {
                        System.out.print(grid[i][j]);
                    }
                }
                System.out.println();
            }
            System.out.println();
        }
        private void setCells(Pair<Integer,Integer> f,Pair<Integer,Integer> s, String sign) {
            int fRow = Math.min(f.getFirst(), s.getFirst());
            int sRow = Math.max(f.getFirst(), s.getFirst());
            int fCol = Math.min(f.getSecond(), s.getSecond());
            int sCol = Math.max(f.getSecond(), s.getSecond());

            for (int i = fRow; i <= sRow; i++) {
                for (int j = fCol; j <= sCol; j++) {
                    grid[i][j] = sign;
                }
            }
        }
        private boolean isShipCloseToAnotherOne(Pair<Integer,Integer> f,Pair<Integer,Integer> s) {
            int fRow = Math.min(f.getFirst(), s.getFirst());
            int sRow = Math.max(f.getFirst(), s.getFirst());
            int fCol = Math.min(f.getSecond(), s.getSecond());
            int sCol = Math.max(f.getSecond(), s.getSecond());

            for (int i = fRow - 1; i <= sRow + 1; i++) {
                for (int j = fCol - 1; j <= sCol + 1; j++) {
                    if (i < 0 || j < 0 || i >= 10 || j >= 10) continue;
                    if (grid[i][j].equals("O")) return true;
                }
            }
            return false;
        }
        private boolean isShipsLengthIsValid(Pair<Integer,Integer> f,Pair<Integer,Integer> s, Ship ship) {
            if (f.getFirst().equals(s.getFirst())) {
                return Math.abs(f.getSecond() - s.getSecond()) + 1 == ship.getLength();
            } else {
                return Math.abs(f.getFirst() - s.getFirst()) + 1 == ship.getLength();
            }
        }
        private boolean isShipsLocationIsValid(Pair<Integer,Integer> f,Pair<Integer,Integer> s) {
            if (!f.getFirst().equals(s.getFirst())) {
                return f.getSecond().equals(s.getSecond());
            } else {
                return !f.getSecond().equals(s.getSecond());
            }
        }
        private boolean isCoordOutOfField(Pair<Integer,Integer> coord) {
            return !((coord.getFirst() >= 0 && coord.getFirst() < 10) || (coord.getSecond() >= 0 && coord.getSecond() < 10));
        }
    }
  learner_created: true
- name: src/battleship/Logic/Field.java
  visible: true
  text: |
    package battleship.Logic;

    /*
        Aircraft Carrier is 5 cells,
        Battleship is 4 cells,
        Submarine is 3 cells,
        Cruiser is also 3 cells,
        and Destroyer is 2 cells.
    */

    import battleship.Logic.Exceptions.InvalidCoordinatesException;
    import battleship.Logic.Exceptions.InvalidSubmarineLengthException;
    import battleship.Logic.Exceptions.ShipPlacedTooCloseException;
    import battleship.Utils.Pair;

    public class Field {
        private final String[][] grid;

        public Field() {
            grid = new String[10][10];
            for (int i = 0; i < 10; i++) {
                grid[i] = new String[11];
            }

            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    grid[i][j] = "~";
                }
            }
        }

        private boolean isCoordinatesValid(int x, int y) {
            return ((x >= 0 && x < 10) && (y >= 0 && y < 10));
        }

        public boolean isShipLocationValid(Pair<int[],int[]> coord) {
            int fx = coord.getFirst()[0];
            int fy = coord.getFirst()[1];
            int sx = coord.getSecond()[0];
            int sy = coord.getSecond()[1];
            if (fx != sx) {
                return fy == sy;
            } else {
                return fy != sy;
            }
        }

        public boolean fire(int[] coordinates) throws InvalidCoordinatesException {
            // check if coordinates are valid
            if (!isCoordinatesValid(coordinates[0],coordinates[1]))
                throw new InvalidCoordinatesException("You entered the wrong coordinates!");

            if (grid[coordinates[0]][coordinates[1]].equals("O")) {
                grid[coordinates[0]][coordinates[1]] = "X";
                return true;
            } else {
                grid[coordinates[0]][coordinates[1]] = "M";
                return false;
            }
        }

        public void placeShip(Pair<int[],int[]> coordinates, Ship ship) throws InvalidCoordinatesException, InvalidSubmarineLengthException, ShipPlacedTooCloseException {
            int minRow = Math.min(coordinates.getFirst()[0], coordinates.getSecond()[0]);
            int maxRow = Math.max(coordinates.getFirst()[0], coordinates.getSecond()[0]);
            int minCol = Math.min(coordinates.getFirst()[1], coordinates.getSecond()[1]);
            int maxCol = Math.max(coordinates.getFirst()[1], coordinates.getSecond()[1]);

            // check if coordinates diagonal
            // check if coordinates is valid

            if (!isShipLocationValid(coordinates) || !(isCoordinatesValid(coordinates.getFirst()[0],coordinates.getSecond()[0])
                    && isCoordinatesValid(coordinates.getFirst()[1],coordinates.getSecond()[1])))
                throw new InvalidCoordinatesException("Wrong ship location!");

    /*        if(isCoordinatesDiagonal(minRow, maxRow, minCol, maxCol))
                throw new InvalidCoordinatesException("Wrong ship location!");*/
            // check if the length of the ship is longer than it should be
            if(isShipsLengthValid(minRow, maxRow, minCol, maxCol, ship))
                throw new InvalidSubmarineLengthException("Wrong length of the Submarine!");
            // check if the ship is close to another
            if(isShipCloseToAnotherOne(minRow, maxRow, minCol, maxCol))
                throw new ShipPlacedTooCloseException("You placed it too close to another one.");
            // place ship
            setCells(minRow, maxRow, minCol, maxCol, "O");
        }
        private boolean isShipCloseToAnotherOne(int fRow, int sRow, int fCol, int sCol) {
            for (int i = fRow - 1; i <= sRow + 1; i++) {
                for (int j = fCol - 1; j <= sCol + 1; j++) {
                    if (i < 0 || j < 0 || i >= 10 || j >= 10) continue;
                    if (grid[i][j].equals("O")) return true;
                }
            }
            return false;
        }

        private boolean isShipsLengthValid(int fRow, int sRow, int fCol, int sCol, Ship ship) {
            if (fRow == sRow) {
                return !(sCol - fCol + 1 == ship.getLength());
            } else if (fCol == sCol) {
                return !(sRow - fRow + 1 == ship.getLength());
            }
            return false;
        }

        private boolean isCoordinatesDiagonal(int fRow, int sRow, int fCol, int sCol) {
            return !((fRow == sRow || fCol == sCol));
        }

        public void showWithFog() {
            System.out.print("  ");
            for (int i = 1; i <= 10; i++) {
                System.out.print(i);
                System.out.print(" ");
            }
            System.out.println();
            for (int i = 0; i < 10; i++) {
                System.out.print((char)('A' + i));
                for (int j = 0; j < 10; j++) {
                    System.out.print(" ");
                    if (!grid[i][j].equals("O"))
                        System.out.print(grid[i][j]);
                    else
                        System.out.print("~");
                }
                System.out.println();
            }
            System.out.println();
        }
        public void show() {
            System.out.print("  ");
            for (int i = 1; i <= 10; i++) {
                System.out.print(i);
                System.out.print(" ");
            }
            System.out.println();
            for (int i = 0; i < 10; i++) {
                System.out.print((char)('A' + i));
                for (int j = 0; j < 10; j++) {
                    System.out.print(" ");
                    System.out.print(grid[i][j]);
                }
                System.out.println();
            }
            System.out.println();
        }

        public void setCells(int fRow, int sRow, int fCol, int sCol, String cell) {
            for (int i = fRow; i <= sRow; i++) {
                for (int j = fCol; j <= sCol; j++) {
                    grid[i][j] = cell;
                }
            }
        }
    }
  learner_created: true
- name: src/battleship/Logic/Exceptions/WrongShipLocationException.java
  visible: true
  text: |
    package battleship.Logic.Exceptions;

    public class WrongShipLocationException extends Exception {
        public WrongShipLocationException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/battleship/Utils/Pair.java
  visible: true
  text: |
    package battleship.Utils;

    public class Pair<F,S> {
        private F first;
        private S second;

        public Pair(F first, S second) {
            this.first = first;
            this.second = second;
        }

        public F getFirst() {
            return first;
        }

        public void setFirst(F first) {
            this.first = first;
        }

        public S getSecond() {
            return second;
        }

        public void setSecond(S second) {
            this.second = second;
        }
    }
  learner_created: true
- name: src/battleship/Logic/Exceptions/ShipPlacedTooCloseException.java
  visible: true
  text: |
    package battleship.Logic.Exceptions;

    public class ShipPlacedTooCloseException extends Exception {
        public ShipPlacedTooCloseException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/battleship/Logic/Exceptions/InvalidCoordinatesException.java
  visible: true
  text: |
    package battleship.Logic.Exceptions;

    public class InvalidCoordinatesException extends Exception {
        public InvalidCoordinatesException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/battleship/Logic/Entities/Player.java
  visible: true
  text: |
    package battleship.Logic.Entities;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    public class Player {
        private List<Ship> ships;

        public Player() {
            this.ships = Arrays.asList(new Ship("Aircraft Carrier", 5),
                                        new Ship("Battleship", 4),
                                        new Ship("Submarine", 3),
                                        new Ship("Cruiser", 3),
                                        new Ship("Destroyer", 2));
        }

        public List<Ship> getShips() {
            return ships;
        }
    }
  learner_created: true
- name: src/battleship/Logic/Player.java
  visible: true
  text: |
    package battleship.Logic;

    import battleship.Utils.Pair;

    import java.util.ArrayList;
    import java.util.List;

    public class Player {
        private List<Ship> ships;

        Player() {
            ships = new ArrayList<>();
        }

        public void placeShip(Ship ship) {
            ships.add(ship);
        }

        public List<Ship> getShips() {
            return ships;
        }
    }
  learner_created: true
- name: src/battleship/Logic/Entities/Ship.java
  visible: true
  text: |
    package battleship.Logic.Entities;

    public class Ship {
        private final String name;
        private final int length;
        private int health;

        public Ship(String name, int length) {
            this.name = name;
            this.length = length;
            this.health = length;
        }

        public String getName() {
            return name;
        }

        public int getLength() {
            return length;
        }

        public int getHealth() {
            return health;
        }

        public void hit() {
            health--;
        }

        public boolean isAlive() {
            return health > 0;
        }
    }
  learner_created: true
- name: src/battleship/Logic/Ship.java
  visible: true
  text: |
    package battleship.Logic;

    import battleship.Utils.Pair;

    public class Ship {
        private final String name;
        private final int length;

        private int health = 0;

        public Ship(String name, int length) {
            this.name = name;
            this.length = length;
            this.health = length;
        }

        public String getName() {
            return name;
        }

        public int getLength() {
            return length;
        }

        public void hit() {
            health--;
        }

        public boolean isDestroyed() {
            return health == 0;
        }
    }
  learner_created: true
- name: src/battleship/Logic/Entities/Game.java
  visible: true
  text: |
    package battleship.Logic.Entities;

    import battleship.Utils.Pair;

    import java.util.Arrays;
    import java.util.List;
    import java.util.Scanner;

    public class Game {
        private final Scanner scanner;
        private final Field fField;
        private final Field sField;
        private boolean isGameOver;

        public Game() {
            this.scanner = new Scanner(System.in);
            this.fField = new Field();
            this.sField = new Field();
            this.isGameOver = false;
        }

        public void Play() {
            placeShip(fField);
            System.out.println("The game starts!");
            fire(fField);
            System.out.println("You sank the last ship. You won. Congratulations!");
        }

        private void placeShip(Field field) {
            List<Ship> shipList = Arrays.asList(new Ship("Aircraft Carrier", 5),
                    new Ship("Battleship", 4),
                    new Ship("Submarine", 3),
                    new Ship("Cruiser", 3),
                    new Ship("Destroyer", 2));

            fField.show(false);

            for(int i = 0; i < shipList.size(); i++) {
                System.out.println("Enter the coordinates of the " + shipList.get(i).getName() + "(" + shipList.get(i).getLength() +" cells):");
                while(true) {
                    try {
                        Pair<Integer,Integer> fCoord = getCoordinatesFromString(scanner.next());
                        Pair<Integer,Integer> sCoord = getCoordinatesFromString(scanner.next());
                        field.placeShip(fCoord, sCoord, shipList.get(i));
                        fField.show(false);
                        break;
                    } catch (Exception e) {
                        System.out.println("Error! " + e.getMessage() + "Try again:");
                    }
                }
            }
        }

        private void fire(Field field) {
            field.show(true);
            System.out.println("Take a shot!");

            while(field.countOfUnsinkableShips() > 0) {
                try {
                    Pair<Integer, Integer> coord = getCoordinatesFromString(scanner.next());
                    boolean isHitted = field.fire(coord);
                    field.show(true);
                    if (isHitted) {
                        if (field.isShipDestroyed(coord)) {
                            if (field.countOfUnsinkableShips() != 0) {
                                System.out.println("You sank a ship! Specify a new target:");
                            } else {
                                return;
                            }
                        } else {
                            System.out.println("You hit a ship! Try again:");
                        }
                    } else {
                        System.out.println("You missed! Try again:");
                    }
                } catch (Exception e) {
                    System.out.println("Error! " + e.getMessage() + "Try again:");
                }
            }
        }

        private Pair<Integer,Integer> getCoordinatesFromString(String coordinates) {
            return new Pair<>(coordinates.charAt(0) - 65, Integer.parseInt(coordinates.substring(1)) - 1);
        }
    }
  learner_created: true
- name: src/battleship/Logic/Exceptions/InvalidSubmarineLengthException.java
  visible: true
  text: |
    package battleship.Logic.Exceptions;

    public class InvalidSubmarineLengthException extends Exception {
        public InvalidSubmarineLengthException(String message) {
            super(message);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/666/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 26 Aug 2022 04:09:34 UTC
record: 4
